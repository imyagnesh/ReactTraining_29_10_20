function getAddress() {
  return {
    city: 'Salt Lake City',
    state: 'UT',
    zip: 84115,
    coords: {
      lat: 40.776608,
      long: -111.920485,
    },
  }
}

function getNumbers() {
  return [1, 2, 3, 4, 5, 6]
}

function getNestedNumbers() {
  return [1, 2, [3, 4, [5, 6]]]
}


1. Using destructuring, call `getAddress()` and create a 'city', 'state' and 'zip' variable.

Answ: const getAddress = {
  city: 'Salt Lake City',
  state: 'UT',
  zip: 84115,
  coords: {
    lat: 40.776608,
    long: -111.920485,
  }
}

const newAddress = {...getAddress, city: 'Test'}

console.log(newAddress);

2. Using destructuring, call `getAddress()` and create an 'address' variable.

Answ: const newAddress = {...getAddress, adddress: 'Test Adress'}

3. Using destructuring, call `getAddress()` and pull the city, state and zip out, and alias them to c, s, z, respectively

Answ: const {city, state, zip, ...newAddress} = {...getAddress, c: 'SaltLake', s: 'WB', z: '70002'}

console.log(newAddress);

4. Using destructuring, call `getAddress()` and create `lat` and `long` variables.

Answ: const newAddress = {...getAddress, lat: '11.202020', long: '22.2458'}

5. Call getNumbers and pull the first value out as `one` and the second as `two`


